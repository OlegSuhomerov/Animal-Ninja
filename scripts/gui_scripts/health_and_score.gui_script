
local game_messages = require('scripts.start_modules.game_messages')
local config = require('scripts.start_modules.config')
local gui_constants = require('scripts.start_modules.gui_constants')
local game_components = require('scripts.start_modules.game_components')
local scenes = require('scripts.start_modules.scenes')
local loader_scenes = require('scripts.modules.loader_scenes')
local go_constants = require('scripts.start_modules.go_constants')
local record = require('scripts.modules.record')

local function create_hearts(self, count_create_hearts)
	
	local start_pos_x = config.start_pos_hearts.x 
	local pos_spawn_hearts = vmath.vector3(config.start_pos_hearts.x, config.start_pos_hearts.y, 0)

	for i = 1, self.count_hearts do
		
		local node = gui.new_box_node(pos_spawn_hearts,config.size_heart)
		gui_constants.arr_hearts[i] = node

		gui.set_texture(node, game_components.atlas_gaming_level)
		gui.play_flipbook(node, game_components.heart)
		gui.set_xanchor(node, gui_constants.anchor_right)
		gui.set_yanchor(node, gui_constants.anchor_top)
		gui.animate(node, game_messages.scale, 1.3, gui.EASING_LINEAR, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		
		pos_spawn_hearts.x = pos_spawn_hearts.x - config.space_hearts_x
		
		if i % config.maximum_line_hearts == 0 then
			pos_spawn_hearts.y = pos_spawn_hearts.y - config.space_hearts_y	
			pos_spawn_hearts.x = start_pos_x
		end
	end
end

local function restore_heart(self)
	local node = gui_constants.arr_hearts[self.count_hearts]
	gui.set_enabled(node, true)
	gui.animate(node, game_messages.scale, 1, gui.EASING_LINEAR, 0.3, 0, function()
		for i = 1, self.count_hearts do
			local node = gui_constants.arr_hearts[i]
			gui.cancel_animation(node, game_messages.scale)
			gui.animate(node, game_messages.scale, 1.3, gui.EASING_LINEAR, 2, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
		end
	end)
	config.arr_sprites[config.id_bonus].weight = config.arr_sprites[config.id_bonus].weight - config.increase_chance_bonus_one
end

local function delete_heart(node)
	gui.set_enabled(node, false)
end

local function check_lose(self)
	
	if self.count_hearts > 0 then
		local node = gui_constants.arr_hearts[self.count_hearts]
		self.count_hearts = self.count_hearts - 1
	
		config.arr_sprites[config.id_bonus].weight = config.arr_sprites[config.id_bonus].weight + config.increase_chance_bonus_one

		gui.animate(node, game_messages.scale, 0.0, gui.EASING_LINEAR, 0.3, 0, function()
				delete_heart(node) 
			end, gui.PLAYBACK_ONCE_FORWARD)
			
		if self.count_hearts == 0 then
			loader_scenes.show_scene(scenes.popup_restart)
			go_constants.level_play = false
			gui_constants.score_in_popup = self.update_score
			self.count_hearts = self.count_hearts - 1
		end
	end
end

local function animation_score(self)
	local node = gui.get_node(game_components.label_score)
	local node_record = gui.get_node(game_components.record_count)

	if self.update_score > gui_constants.start_score then
		self.current_time = 0
		local total_time = config.total_time_score
		local update_score = gui_constants.start_score
		local score_difference = self.update_score - update_score
		local timer_id = timer.delay(0.0, true, function(self, timer_id)

			local time = self.current_time / total_time
			
			gui_constants.start_score = update_score + math.modf(score_difference * time)
			
			if gui_constants.start_score > self.update_score then
				gui_constants.start_score = self.update_score
				timer.cancel(timer_id)
			end
			
			if self.record < gui_constants.start_score then
				gui.set_text(node_record, gui_constants.start_score)
			end
			
			gui.set_text(node, gui_constants.start_score)
			
			if self.update_score <= gui_constants.start_score then 
				timer.cancel(timer_id)
			end
		end)
	end
end

local function delete_score(self)
	self.update_score = 0
	gui_constants.start_score = 0
	local node = gui.get_node(game_components.label_score)
	gui.set_text(node, gui_constants.start_score)
end

local function show_score_increase(message)
	local node = gui.new_text_node(message.death_pos,config.arr_sprites[message.num_sprite].price)
	gui.animate(node, game_messages.scale, 1.5, gui.EASING_LINEAR, 1, 0, function() gui.delete_node(node) end)
end

function init(self)
	msg.post(game_components.myself, game_messages.restart_data)
	self.update_score = 0
	config.arr_sprites[config.id_bonus].weight = 0
	self.current_time = 0
	
	local node = gui.get_node(game_components.record_count)
	self.record = record.show()
	gui.set_text(node, self.record)
end

function update(self, dt)
	self.current_time = self.current_time + dt
end

function on_message(self, message_id, message, sender)
	if message_id == game_messages.change_score then
		self.update_score = self.update_score + config.arr_sprites[message.num_sprite].price
		self.growth_rate = (self.update_score - gui_constants.start_score) / 10
		show_score_increase(message)
		animation_score(self)
	end
	if message_id == game_messages.reduce_lives then
		check_lose(self)
	end
	if message_id == game_messages.restart_data then
		self.count_hearts = config.count_hearts
		go_constants.level_play = true
		create_hearts(self, self.count_hearts)
		delete_score(self)
	end
	if message_id == game_messages.add_heart then
		if self.count_hearts < config.count_hearts then
			self.count_hearts = self.count_hearts + 1
			restore_heart(self)
		end
	end
end




